-- City-level fare and trip summary report 
SELECT 
      dc.city_name, 
      COUNT(ft.trip_id) AS total_trips, 
      ROUND((SUM(ft.fare_amount)/SUM(ft.distance_travelled_km)),1) AS avg_fare_per_km,
      ROUND((SUM(ft.fare_amount)/COUNT(ft.trip_id)),1) AS avg_fare_per_trip,
      ROUND(COUNT(ft.trip_id)*100/(SELECT COUNT(trip_id) FROM fact_trips),1) AS total_trips_cont_pct 
FROM fact_trips ft
JOIN dim_city dc
     ON dc.city_id = ft.city_id
GROUP BY dc.city_name, ft.city_id
ORDER BY total_trips_cont_pct DESC;

-- Monthly city-level trips target performance report
WITH monthly_performance AS (
    SELECT 
          ft.city_id, 
          dc.city_name, 
          ft.date, 
          dd.month_name, 
          COUNT(DISTINCT(ft.trip_id)) AS actual_trips 
    FROM fact_trips ft
    JOIN dim_city dc 
         ON ft.city_id = dc.city_id
    JOIN dim_date dd 
         ON ft.date = dd.date
    GROUP BY dc.city_name, dd.month_name, ft.city_id, ft.date
)

SELECT 
      city_name, 
      DATENAME(MONTH, mp.date) AS month_name, 
      actual_trips, 
      total_target_trips,
      CASE
          WHEN actual_trips > total_target_trips THEN 'Above Target'
          ELSE 'Below Target'
      END AS performance_status,
      CONCAT(ROUND((actual_trips - total_target_trips) *100.0 / total_target_trips, 2), '%') AS diff_pct
FROM targets_db.monthly_target_trips tt
JOIN monthly_performance mp 
     ON mp.city_id = tt.city_id
GROUP BY city_name, month_name, mp.date, actual_trips, total_target_trips
ORDER BY city_name, mp.date;

-- City-Level Repeat Passenger Trip Frequency Report
WITH repeat_passengers AS ( 
    SELECT 
          dc.city_name, 
          td.city_id,
          SUM(td.repeat_passenger_count) AS passenger
    FROM dim_repeat_trip_distribution td
    JOIN dim_city dc
         ON td.city_id = dc.city_id
    GROUP BY dc.city_name, td.city_id
)

SELECT 
    city_name,
    ROUND(SUM(CASE 
              WHEN trip_count = '2-Trips' THEN repeat_passenger_count * 100.0 / passenger ELSE 0 
              END), 2) AS 2_Trips,
    ROUND(SUM(CASE 
              WHEN trip_count = '3-Trips' THEN repeat_passenger_count * 100.0 / passenger ELSE 0 
              END), 2) AS 3_Trips,
    ROUND(SUM(CASE 
              WHEN trip_count = '4-Trips' THEN repeat_passenger_count * 100.0 / passenger ELSE 0 
              END), 2) AS 4_Trips,
    ROUND(SUM(CASE 
              WHEN trip_count = '5-Trips' THEN repeat_passenger_count * 100.0 / passenger ELSE 0 
              END), 2) AS 5_Trips,
    ROUND(SUM(CASE 
              WHEN trip_count = '6-Trips' THEN repeat_passenger_count * 100.0 / passenger ELSE 0 
              END), 2) AS 6_Trips,
    ROUND(SUM(CASE 
         
