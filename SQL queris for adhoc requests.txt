-- City-level fare and trip summary report 
SELECT 
      dc.city_name, 
      COUNT(ft.trip_id) AS total_trips, 
      ROUND((SUM(ft.fare_amount)/SUM(ft.distance_travelled_km)),1) AS avg_fare_per_km,
      ROUND((SUM(ft.fare_amount)/COUNT(ft.trip_id)),1) AS avg_fare_per_trip,
      ROUND(COUNT(ft.trip_id)*100/(SELECT COUNT(trip_id) FROM fact_trips),1) AS total_trips_cont_pct 
FROM fact_trips ft
JOIN dim_city dc
     ON dc.city_id = ft.city_id
GROUP BY dc.city_name, ft.city_id
ORDER BY total_trips_cont_pct DESC;

-- Monthly city-level trips target performance report
WITH monthly_performance AS (
    SELECT 
          ft.city_id, 
          dc.city_name, 
          ft.date, 
          dd.month_name, 
          COUNT(DISTINCT(ft.trip_id)) AS actual_trips 
    FROM fact_trips ft
    JOIN dim_city dc 
         ON ft.city_id = dc.city_id
    JOIN dim_date dd 
         ON ft.date = dd.date
    GROUP BY dc.city_name, dd.month_name, ft.city_id, ft.date
)

SELECT 
      city_name, 
      DATENAME(MONTH, mp.date) AS month_name, 
      actual_trips, 
      total_target_trips,
      CASE
          WHEN actual_trips > total_target_trips THEN 'Above Target'
          ELSE 'Below Target'
      END AS performance_status,
      CONCAT(ROUND((actual_trips - total_target_trips) *100.0 / total_target_trips, 2), '%') AS diff_pct
FROM targets_db.monthly_target_trips tt
JOIN monthly_performance mp 
     ON mp.city_id = tt.city_id
GROUP BY city_name, month_name, mp.date, actual_trips, total_target_trips
ORDER BY city_name, mp.date;

-- City-Level Repeat Passenger Trip Frequency Report
WITH repeat_passengers AS ( 
    SELECT 
          dc.city_name, 
          td.city_id,
          SUM(td.repeat_passenger_count) AS passenger
    FROM dim_repeat_trip_distribution td
    JOIN dim_city dc
         ON td.city_id = dc.city_id
    GROUP BY dc.city_name, td.city_id
)

SELECT 
    city_name,
    ROUND(SUM(CASE 
              WHEN trip_count = '2-Trips' THEN repeat_passenger_count * 100.0 / passenger ELSE 0 
              END), 2) AS 2_Trips,
    ROUND(SUM(CASE 
              WHEN trip_count = '3-Trips' THEN repeat_passenger_count * 100.0 / passenger ELSE 0 
              END), 2) AS 3_Trips,
    ROUND(SUM(CASE 
              WHEN trip_count = '4-Trips' THEN repeat_passenger_count * 100.0 / passenger ELSE 0 
              END), 2) AS 4_Trips,
    ROUND(SUM(CASE 
              WHEN trip_count = '5-Trips' THEN repeat_passenger_count * 100.0 / passenger ELSE 0 
              END), 2) AS 5_Trips,
    ROUND(SUM(CASE 
              WHEN trip_count = '6-Trips' THEN repeat_passenger_count * 100.0 / passenger ELSE 0 
              END), 2) AS 6_Trips,
    ROUND(SUM(CASE 
              WHEN trip_count = '7-Trips' THEN repeat_passenger_count * 100.0 / passenger ELSE 0 
              END), 2) AS 7_Trips,
    ROUND(SUM(CASE 
              WHEN trip_count = '8-Trips' THEN repeat_passenger_count * 100.0 / passenger ELSE 0 
              END), 2) AS 8_Trips,
    ROUND(SUM(CASE 
              WHEN trip_count = '9-Trips' THEN repeat_passenger_count * 100.0 / passenger ELSE 0 
              END), 2) AS 9_Trips,
    ROUND(SUM(CASE 
              WHEN trip_count = '10-Trips' THEN repeat_passenger_count * 100.0 / passenger ELSE 0 
              END), 2) AS 10_Trips
FROM dim_repeat_trip_distribution td
JOIN repeat_passengers rp
     ON rp.city_id = td.city_id
GROUP BY city_name
ORDER BY city_name;

-- Cities with highest and lowest Total New Passengers
WITH city_ranking AS (
    SELECT 
          dc.city_name, 
          fps.total_passengers,
          DENSE_RANK() OVER (ORDER BY fps.total_passengers DESC) AS top_ranking,
          DENSE_RANK() OVER (ORDER BY fps.total_passengers ASC) AS bottom_ranking 
    FROM fact_passenger_summary fps
    JOIN dim_city dc 
         ON fps.city_id = dc.city_id
)
SELECT 
      city_name, 
      total_passengers, 
      CASE 
          WHEN top_ranking <= 3 THEN 'Top 3'
          WHEN bottom_ranking <= 3 THEN 'Bottom 3'
          ELSE NULL
      END AS city_category
FROM city_ranking
WHERE top_ranking <= 3 OR bottom_ranking <= 3
ORDER BY total_passengers DESC;

-- Month with highest Revenue for each city
WITH city_ranking AS (
    SELECT
          ft.city_id,
          DATENAME(MONTH, ft.date) AS month, 
          SUM(ft.fare_amount) AS revenue,
          RANK() OVER (PARTITION BY ft.city_id ORDER BY SUM(ft.fare_amount) DESC) AS ranking
    FROM fact_trips ft 
    GROUP BY ft.city_id, ft.date
)

SELECT 
      dc.city_name, 
      cr.month, 
      CONCAT(ROUND(cr.revenue / 1000000.0, 3), 'M') AS revenue, 
      CONCAT(ROUND(cr.revenue * 100.0 / (SELECT SUM(fare_amount) FROM fact_trips WHERE city_id = cr.city_id), 2), '%') AS cont_pct
FROM fact_trips ft
JOIN dim_city dc
     ON ft.city_id = dc.city_id
JOIN city_ranking cr 
     ON ft.city_id = cr.city_id
WHERE cr.ranking = 1
GROUP BY dc.city_name, cr.month, cr.revenue
ORDER BY cr.revenue DESC;

-- Repeat Passenger Rate analysis
WITH monthly_repeat AS ( 
    SELECT 
          dc.city_name,
          ft.month,
          DATENAME(MONTH, ft.month) AS month_name, 
          fps.total_passengers, 
          fps.repeat_passengers,
          CONCAT(ROUND((fps.repeat_passengers * 100.0 / fps.total_passengers), 2), '%') AS monthly_repeat_passenger_rate
    FROM fact_passenger_summary fps
    JOIN dim_city dc 
         ON fps.city_id = dc.city_id
    GROUP BY dc.city_name, ft.month, fps.total_passengers, fps.repeat_passengers
),
city_repeat AS (
    SELECT 
          dc.city_name, 
          fps.total_passengers, 
          fps.repeat_passengers,  
          CONCAT(ROUND((SUM(fps.repeat_passengers) * 100.0 / SUM(fps.total_passengers)), 2), '%') AS city_repeat_passenger_rate
    FROM fact_passenger_summary fps
    JOIN dim_city dc 
         ON fps.city_id = dc.city_id
    GROUP BY dc.city_name
)

SELECT 
       mr.city_name, 
       mr.month_name, 
       mr.total_passengers, 
       mr.repeat_passengers, 
       mr.monthly_repeat_passenger_rate, 
       cr.city_repeat_passenger_rate 
FROM monthly_repeat mr
JOIN city_repeat cr
     ON mr.city_name = cr.city_name
ORDER BY mr.city_name, mr.month_name;
